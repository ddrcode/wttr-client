#!/bin/bash

# Credits
# 1. Testing with grep whether an array contains an element:
#        https://stackoverflow.com/a/47541882/881972
# 2. Elegant way of parsing config file:
#        https://unix.stackexchange.com/a/331965/565444
#

CONFIG_FILE="$HOME/.config/wttr/wttr.conf"

config_read_file() {
    (grep -E "^${2}=" -m 1 "${1}" 2>/dev/null || echo "VAR=__UNDEFINED__") \
        | head -n 1 | cut -d '=' -f 2-
}

# credit to https://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script
config_get() {
    local val="$(config_read_file "$CONFIG_FILE" "${1}")"
    if [ "${val}" = "__UNDEFINED__" ]; then
        val="$2"
    fi
    printf -- "%s" "${val}"
}

check_values() {
    local argv=("$@")
    local val="${argv[0]}"
    local arr=("${argv[@]:1}")
    if ! printf '%s\0' "${arr[@]}" | grep -Fxqz -- "$val"; then
        echo "Unrecognized value: $val. Allowed values: ${arr[@]}"
        exit 1
    fi
}

print() {
    local msg="$1"
    local level="$2"
    if [[ $SILENT -eq 1 ]]; then return; fi
    if [[ "$level" == "debug" && $DEBUG -ne 1 ]]; then return; fi

    if [[ "$level" == "error" ]]; then
        >&2 printf -- "${msg}\n"
    else
        printf -- "${msg}\n"
    fi
}


CITY="$(config_get DEFAULT_LOCATION '')"
OUTPUT="$(config_get OUTPUT 'auto')"
UNITS="$(config_get UNITS 'auto')"
ENGINE="$(config_get ENGINE 'curl')"
FORMAT="$(config_get FORMAT, '')"
SILENT=0
PLAIN=0
DEBUG=0
CITIES_ARR=()

# see https://unix.stackexchange.com/questions/129391/passing-named-arguments-to-shell-scripts
# for reference
while [ $# -gt 0 ]; do
    case "$1" in
        --city*|-c*)
            if [[ "$1" != *=* ]]; then shift; fi # Value is next arg if no `=`
            CITY="${1#*=}"
            ;;
        --debug)
            DEBUG=1
            ;;
        --engine|-e)
            if [[ "$1" != *=* ]]; then shift; fi
            ENGINE="${1#*=}"
            ;;
        --format|f)
            if [[ "$1" != *=* ]]; then shift; fi
            FORMAT="${1#*=}"
            ;;
        --help|-h)
            print "Meaningless help message\n"
            exit 0
            ;;
        --output|-o)
            if [[ "$1" != *=* ]]; then shift; fi
            OUTPUT="${1#*=}"
            ;;
        --plain)
            PLAIN=1
            ;;
        --silent)
            SILENT=1
            ;;
        --text|-t)
            OUTPUT="text"
            ;;
        --units|-u)
            if [[ "$1" != *=* ]]; then shift; fi
            UNITS="${1#*=}"
            ;;
        *)
            if [[ "$1" == -* ]]; then
                print "Error: Invalid argument $1" "error"
                exit 1
            else
                CITIES_ARR+=("$1")
            fi
            ;;
    esac
    shift
done

printf -v joined '%s,' "${CITIES_ARR[@]}"
printf -v CITIES "${joined%,}"
if [[ "$CITIES" == "" ]]; then CITIES="$CITY"; fi
CITIES=$(echo "$CITIES" | sed -r 's/ /\+/g')
if echo "$CITIES" | grep -q ,; then
    CITIES="{${CITIES}}"
fi

ALLOWED_UNITS=('u' 'm' 'M' 'auto')
ALLOWED_OUTPUTS=('auto' 'text' 'png' 'json')

check_values "$UNITS" "${ALLOWED_UNITS[@]}"
check_values "$OUTPUT" "${ALLOWED_OUTPUTS[@]}"

EXEC="$ENGINE"
URL="https://wttr.in/${CITIES}"
PARAMS=""

print "--${OUTPUT}--" "debug"

if [[ "$OUTPUT" == "auto" || "$OUTPUT" == "png" ]] \
    && [[ "$TERM"=="xterm-kitty" ]] \
    && which -s magick
then
    EXEC="kitty icat --align=left"
    URL="${URL}.png"
elif [[ "$OUTPUT" == "png" ]]; then
    print "Graphic output not possible in this terminal configuration\n" "error"
    exit 1
elif [[ "$OUTPUT" == "auto" ]]; then
    OUTPUT="text"
fi

if [[ "$OUTPUT" == "text" && $PLAIN -eq 1 ]]; then
    PARAMS="${PARAMS}T"
elif [[ "$OUTPUT" == "json" ]]; then
    PARAMS="format=j2"
    if [[ $PLAIN -ne 1 ]] && which -s bat; then
        $EXEC "${URL}?${PARAMS}" | bat -l json
        exit 0
    fi
fi

$EXEC "${URL}?${PARAMS}"

